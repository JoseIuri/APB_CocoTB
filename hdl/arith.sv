/**
  ******************************************************************************
  * File automatic generated by XGeneratorTB software
  ******************************************************************************
**/
module arith (
        input logic pclk,
		input logic presetn,
		input logic [31:0] paddr,
		input logic [31:0] pwdata,
		input logic  psel,
		input logic  pwrite,
		input logic  penable,
		output logic [31:0] prdata,
		output logic  pslverr,
		output logic  pready
    );

	localparam IDDLE = 3'd0,
 			   W_ENABLE = 3'd1,
			   R_ENABLE = 3'd2;


	reg [31:0] reg_bank [0:3];

	reg [1:0] state;


	always @(posedge pclk or negedge presetn) begin
		if (presetn == 0) begin
			state <=  IDDLE;
			prdata <= 32'd0;
			pslverr <= 0;
			pready <= 0;

			reg_bank[0] <= 31'd0;
			reg_bank[1] <= 31'd0;
			reg_bank[2] <= 31'd0;
			reg_bank[3] <= 31'd0;
		end

		else begin
			case (state)
			IDDLE: begin
				if (psel) begin
					if (pwrite) begin
						state <= W_ENABLE;
					end
					else begin
						state <= R_ENABLE;
					end
					pslverr <= 0;
					pready <= 0;
					prdata <= prdata;
				end
			end
			W_ENABLE: begin
				if (psel && pwrite) begin
					if (paddr < 32'd12) begin
						reg_bank[paddr/4]  <= pwdata;
						pready <= 1;
						pslverr <= 0;
					end
					else begin
						pready <= 1;
						pslverr <= 1;
					end
					
					if (paddr < 32'd12 && paddr >= 32'd8) begin
						if (reg_bank[2][31]) begin
							if (reg_bank[2][0]) begin
								reg_bank[3] <= reg_bank[2] + reg_bank[1];
							end
							else begin
								reg_bank[3] <= reg_bank[2] * reg_bank[1];
							end
						end
					end
				end
				state <= IDDLE;
			end

			R_ENABLE: begin
				if (psel && !pwrite) begin
					if (paddr < 32'd16) begin
						prdata <= reg_bank[paddr/4];
						pready <= 1;
						pslverr <= 0;
					end
					else begin
						pready <= 1;
						pslverr <= 1;
					end          
				end
				state <= IDDLE;
			end

			endcase
		end
	end
endmodule